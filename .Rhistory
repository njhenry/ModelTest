fit.new <- nlminb(m$par,m$fn,m$gr,
control=list(iter.max=300,eval.max=300))
fit.new
source('~/representertmb.R')
fit.new$par
f$par
fit.new
source('~/representertmb.R')
source('~/representertmb.R')
fit.new
f
source('~/representertmb.R')
fit.new
f
source('~/representertmb.R')
fit.new
source('~/representertmb.R')
fit.new
f
m(runif(N))
m$fn()
m$fn(runif(N))
m$fn(runif(N))
m$fn(runif(N))
m$fn(f$par)
m$fn(fit.new$par)
f
source('~/representertmb.R')
fit.new
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
fit.new
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representertmb.R')
m$fn(f$par)
m$fn(c(f$par, f_y$par))
f
fit.net
fit.new
f
source('~/representertmb.R')
source('~/representertmb.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
xy.df
yx.df
c(xy.df, yx.df)
source('~/representerneat.R')
source('~/representerneat.R')
nlminb
?nlminb
#set.seed(10)
library(TMB)
#########
###kernel
#########
s <- 250
k <- function(x1, x2){
return(exp(-((x1-x2)^2) / s))
}
kvec <- function(x1, yvec){
return(sapply(yvec, function(yi) k(x1, yi)))
}
#gram matrix for y
L <- matrix(NA, ncol=N, nrow=N)
for(i in 1:N){
for(j in 1:N){
L[i, j] <- k(y[i], y[j])
}
}
#gram matrix for x
K <- matrix(NA, ncol=N, nrow=N)
for(i in 1:N){
for(j in 1:N){
K[i, j] <- k(x[i], x[j])
}
}
#norm and identity penalisation
l <- 0.01
l_inv <- 0
###################
###create fake data
###################
N <- 200
m <- 20*pi
x <- runif(N, 0, m)
#y <- sin(x/100) + rnorm(N, sd = 0.1)
#y <- exp(-((x-x[3])^2)/s) + rnorm(N, sd = 0.01)
#y <- runif(N)
#y <- 2*sqrt(x)
#y <- 2*x
y <- m * sin(x/30)
sd <- 5
y <- y + rnorm(N, sd = sd)
x <- x + rnorm(N, sd = sd)
plot(x, y)
dat.df <- data.frame(x=x,y=y, name=rep("data", length(x)))
#############
###fit x in R
#############
bias.x <- function(alphas){
sum((y - sapply(1:N, function(i) as.numeric(t(alphas) %*% K[i, ])))^2)
}
nrm.x <- function(alphas){
as.numeric(t(alphas) %*% K %*% alphas)
}
loss.x <- function(alphas){
return(bias.x(alphas) + l * nrm.x(alphas))
}
gr.x <- function(alphas){
as.numeric((2+l)* t(((K+t(K)) %*% alphas)) - 2*t(y)%*% K)
}
print("fitting x in R")
ptm <- proc.time()
f.x <- optim(rep(0, N), loss.x, gr.x, method = "BFGS")
print(proc.time() - ptm)
fit.x <- function(x_val){
return(as.numeric(t(f.x$par) %*% kvec(x_val, x)))
}
M <- 1000
x_plot <- runif(M, min(x), max(x))
xy.df <- data.frame(x=x_plot, y=sapply(x_plot, fit.x), name=rep("xy", length(x_plot)))
#############
###fit y in R
#############
bias.y <- function(betas){
sum((x - sapply(1:N, function(i) as.numeric(t(betas) %*% L[i, ])))^2)
}
nrm.y <- function(betas){
as.numeric(t(betas) %*% L %*% betas)
}
loss.y <- function(betas){
return(bias.y(betas) + l * nrm.y(betas))
}
gr.y <- function(betas){
as.numeric((2+l)* t(((L+t(L)) %*% betas)) - 2*t(y)%*% L)
}
print("fitting y in R")
ptm <- proc.time()
f.y <- optim(rep(0, N), loss.y, gr.y, method = "BFGS")
print(proc.time() - ptm)
fit.y <- function(y_val){
return(as.numeric(t(f.y$par) %*% kvec(y_val, y)))
}
y_plot <- runif(M, min(y), max(y))
yx.df <- data.frame(x=sapply(y_plot, fit.y), y_plot, name=rep("yx", length(y_plot)))
###fit both separately in TMB
compile("representersep.cpp")
dyn.load(dynlib("representersep"))
m.sep <- MakeADFun(
data = list(x=x, y=y, K=K, L=L, l=l, l_inv=l_inv, s=s),
parameters = list(alphas = runif(N), betas = runif(N)),
DLL = "representersep"
)
print("fitting both separately in TMB")
f.sep.tmb <- nlminb(m.sep$par,m.sep$fn,m.sep$gr)
fit.x.sep.tmb <- function(x_val){
return(as.numeric(t(f.sep.tmb$par[1:N]) %*% kvec(x_val, x)))
}
fit.y.sep.tmb <- function(y_val){
return(as.numeric(t(f.sep.tmb$par[-(1:N)]) %*% kvec(y_val, y)))
}
tmbsep.df <- data.frame(x=c(x_plot, sapply(y_plot, fit.y.sep.tmb)),
y=c(sapply(x_plot, fit.x.sep.tmb), y_plot),
ty=rep(c("xyseptmb", "yxseptmb"), c(length(x_plot), length(y_plot))))
##############
##plot results
##############
library(ggplot2)
plot.df <- rbind(dat.df, xy.df, yx.df, tmbsep.df)
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
#set.seed(10)
library(TMB)
#########
###kernel
#########
s <- 250
k <- function(x1, x2){
return(exp(-((x1-x2)^2) / s))
}
kvec <- function(x1, yvec){
return(sapply(yvec, function(yi) k(x1, yi)))
}
#gram matrix for y
L <- matrix(NA, ncol=N, nrow=N)
for(i in 1:N){
for(j in 1:N){
L[i, j] <- k(y[i], y[j])
}
}
#gram matrix for x
K <- matrix(NA, ncol=N, nrow=N)
for(i in 1:N){
for(j in 1:N){
K[i, j] <- k(x[i], x[j])
}
}
#norm and identity penalisation
l <- 1
l_inv <- 0
###################
###create fake data
###################
N <- 10
m <- 20*pi
x <- runif(N, 0, m)
#y <- sin(x/100) + rnorm(N, sd = 0.1)
#y <- exp(-((x-x[3])^2)/s) + rnorm(N, sd = 0.01)
#y <- runif(N)
#y <- 2*sqrt(x)
#y <- 2*x
y <- m * sin(x/30)
sd <- 5
y <- y + rnorm(N, sd = sd)
x <- x + rnorm(N, sd = sd)
plot(x, y)
dat.df <- data.frame(x=x,y=y, name=rep("data", length(x)))
#############
###fit x in R
#############
bias.x <- function(alphas){
sum((y - sapply(1:N, function(i) as.numeric(t(alphas) %*% K[i, ])))^2)
}
nrm.x <- function(alphas){
as.numeric(t(alphas) %*% K %*% alphas)
}
loss.x <- function(alphas){
return(bias.x(alphas) + l * nrm.x(alphas))
}
gr.x <- function(alphas){
as.numeric((2+l)* t(((K+t(K)) %*% alphas)) - 2*t(y)%*% K)
}
print("fitting x in R")
ptm <- proc.time()
f.x <- optim(rep(0, N), loss.x, gr.x, method = "BFGS")
print(proc.time() - ptm)
fit.x <- function(x_val){
return(as.numeric(t(f.x$par) %*% kvec(x_val, x)))
}
M <- 1000
x_plot <- runif(M, min(x), max(x))
xy.df <- data.frame(x=x_plot, y=sapply(x_plot, fit.x), name=rep("xy", length(x_plot)))
#############
###fit y in R
#############
bias.y <- function(betas){
sum((y - sapply(1:N, function(i) as.numeric(t(betas) %*% L[i, ])))^2)
}
nrm.y <- function(betas){
as.numeric(t(betas) %*% L %*% betas)
}
loss.y <- function(betas){
return(bias.y(betas) + l * nrm.y(betas))
}
gr.y <- function(betas){
as.numeric((2+l)* t(((L+t(L)) %*% betas)) - 2*t(y)%*% L)
}
print("fitting y in R")
ptm <- proc.time()
f.y <- optim(rep(0, N), loss.y, gr.y, method = "BFGS")
print(proc.time() - ptm)
fit.y <- function(y_val){
return(as.numeric(t(f.y$par) %*% kvec(y_val, y)))
}
y_plot <- runif(M, min(y), max(y))
yx.df <- data.frame(x=sapply(y_plot, fit.y), y=y_plot, name=rep("yx", length(y_plot)))
###fit both separately in TMB
compile("representersep.cpp")
dyn.load(dynlib("representersep"))
m.sep <- MakeADFun(
data = list(x=x, y=y, K=K, L=L, l=l, l_inv=l_inv, s=s),
parameters = list(alphas = runif(N), betas = runif(N)),
DLL = "representersep"
)
print("fitting both separately in TMB")
f.sep.tmb <- nlminb(m.sep$par,m.sep$fn,m.sep$gr)
fit.x.sep.tmb <- function(x_val){
return(as.numeric(t(f.sep.tmb$par[1:N]) %*% kvec(x_val, x)))
}
fit.y.sep.tmb <- function(y_val){
return(as.numeric(t(f.sep.tmb$par[-(1:N)]) %*% kvec(y_val, y)))
}
tmbsep.df <- data.frame(x=c(x_plot, sapply(y_plot, fit.y.sep.tmb)),
y=c(sapply(x_plot, fit.x.sep.tmb), y_plot),
name=rep(c("xyseptmb", "yxseptmb"), c(length(x_plot), length(y_plot))))
##############
##plot results
##############
library(ggplot2)
plot.df <- rbind(dat.df, xy.df, yx.df)
p <- ggplot(plot.df) + geom_point(aes(x=x, y=y, color=name))
print(p)
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
f.sep.tmb$par
f.tmb$par
source('~/representerneat.R')
source('~/representerneat.R')
Rcpp::sourceCpp('representertmb.cpp')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
Rcpp::sourceCpp('representertmb.cpp')
Rcpp::sourceCpp('representertmb.cpp')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representertmb.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
source('~/representerneat.R')
dat <- read.csv("C:/Users/scro3122/Documents/Palu_CSB_2015_With_XY.csv")
dat$X.6
dat$X.6[100]
source('~/madagascar.R')
source('~/madagascar.R')
source('~/madagascar.R')
length(lat)
length(lon)
source('~/madagascar.R')
source('~/madagascar.R')
lenght(lat)
length(lat)
length(lon)
source('~/madagascar.R')
source('~/madagascar.R')
dat$X.6
as.numeric(dat$X.6)
source('~/madagascar.R')
source('~/madagascar.R')
source('~/madagascar.R')
dat <- read.csv("C:/Users/scro3122/Documents/Palu_CSB_2015_With_XY.csv")
lat.all <- as.numeric(as.character(dat$X.6))
lon.all <- as.numeric(as.character(dat$X.7))
lon.all
dat$X.7
dat$X.6
source('~/madagascar.R')
lon
length(lat)
plot(lat, lon)
lat[1]
lon[1]
which(lat==0)
which(lat.all==0)
source('~/madagascar.R')
source('~/madagascar.R')
plot(lat, lon)
plot(lon, lat)
source('~/madagascar.R')
source('~/madagascar.R')
?plot
source('~/madagascar.R')
source('~/madagascar.R')
source('~/madagascar.R')
source('~/madagascar.R')
source('~/madagascar.R')
source('~/madagascar.R')
source('~/madagascar.R')
source('~/ModelTest/getTempCovs3Par.R')
source('~/ModelTest/getTempCovs3Par.R')
source('~/ModelTest/getTempCovs3Par.R')
source('~/ModelTest/getTempCovs3Par.R')
source('~/ModelTest/getTempCovs3Par.R')
source('~/ModelTest/carworks.R')
X %*% beta
Y2 <- as.vector(rmvnorm(1, mean = as.vector(X %*% beta))
)
plot(X[, 1], Y2)
plot(X[, 2], Y2)
source('~/ModelTest/carworks.R')
source('~/ModelTest/carworks.R')
source('~/ModelTest/carworks.R')
source('~/ModelTest/carworks.R')
x <- runif(1000, 0, 10)
plot(x, dgamma(x, 1.0. 0.2))
plot(x, dgamma(x, 1.0, 0.2))
plot(x, dgamma(x, 1.0, shape = 0.2))
plot(x, dgamma(x, 2.0, shape = 0.2))
plot(x, dgamma(x, 10.0, shape = 0.2))
plot(x, dgamma(x, 10.0, shape = 1))
plot(x, dgamma(x, 10.0, shape = 2))
plot(x, dgamma(x, 10.0, shape = 3))
plot(x, dgamma(x, 3, shape = 3))
source('~/ModelTest/carworks.R')
plot(x, dgamma(x, 3, shape = 3))
plot(x, dgamma(x, 3, 3))
plot(x, dgamma(x, 3, 10))
plot(x, dgamma(x, 3, shape = 10))
source('~/ModelTest/carworks.R')
source('~/ModelTest/carworks.R')
source('~/ModelTest/carworks.R')
source('~/ModelTest/carworks.R')
