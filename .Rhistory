# g <- from_adj_matrix(total_edges, mode = "directed", weighted = TRUE)
# g$nodes_df$label <- names(obs_full)
# g$edges_df$"label" <- g$edges_df$weight
# g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", N_obs - 1))
# g$nodes_df$fontcolor <- c("white", rep("black", N_obs - 1))
# print(render_graph(g))
total_edges <- round(Reduce("+", adj_mat_list) / N_iter, 2)
edges_exist <- (total_edges > 0) * 1
total_edges_sparse <- total_edges
total_edges_sparse[total_edges < 0.5] <- 0
##minimal
am <- plot.minimal.n(total_edges_sparse, 1, names(obs_full), 1)
n_obs_am <- dim(am[[3]])[1]
g <- from_adj_matrix(am[[3]], mode = "directed", weighted = TRUE)
g$nodes_df$label <- names(obs_full)[am[[4]]]
g$edges_df$"label" <- g$edges_df$weight
g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", n_obs_am - 1))
g$nodes_df$fontcolor <- c("white", rep("black", n_obs_am - 1))
print(render_graph(g))
# g <- from_adj_matrix(total_edges_sparse, mode = "directed", weighted = TRUE)
# g <- from_adj_matrix(total_edges, mode = "directed", weighted = TRUE)
# g$nodes_df$label <- names(obs_full)
# g$edges_df$"label" <- g$edges_df$weight
# g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", N_obs - 1))
# g$nodes_df$fontcolor <- c("white", rep("black", N_obs - 1))
# print(render_graph(g))
#save(adj_mat_list, file="mad_graphs_tl2.RData")
save(list=c("adj_mat_all", "obs_full"), fil = "mad_time_lags_12_iter")
#save(adj_mat_list, file="mad_graphs_tl2.RData")
save(list=c("adj_mat_all", "obs_full"), fil = "mad_time_lags_12_iter.RData")
#save(adj_mat_list, file="mad_graphs_tl2.RData")
save(list=c("adj_mat_all", "obs_full"), file = "mad_time_lags_12_iter.RData")
total_edges <- round(Reduce("+", adj_mat_list) / N_iter, 2)
edges_exist <- (total_edges > 0) * 1
total_edges_sparse <- total_edges
total_edges_sparse[total_edges < 0.5] <- 0
##minimal
am <- plot.minimal.n(total_edges_sparse, 1, names(obs_full), 2)
n_obs_am <- dim(am[[3]])[1]
g <- from_adj_matrix(am[[3]], mode = "directed", weighted = TRUE)
g$nodes_df$label <- names(obs_full)[am[[4]]]
g$edges_df$"label" <- g$edges_df$weight
g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", n_obs_am - 1))
g$nodes_df$fontcolor <- c("white", rep("black", n_obs_am - 1))
print(render_graph(g))
# g <- from_adj_matrix(total_edges_sparse, mode = "directed", weighted = TRUE)
# g <- from_adj_matrix(total_edges, mode = "directed", weighted = TRUE)
# g$nodes_df$label <- names(obs_full)
# g$edges_df$"label" <- g$edges_df$weight
# g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", N_obs - 1))
# g$nodes_df$fontcolor <- c("white", rep("black", N_obs - 1))
# print(render_graph(g))
total_edges <- round(Reduce("+", adj_mat_list) / N_iter, 2)
edges_exist <- (total_edges > 0) * 1
total_edges_sparse <- total_edges
total_edges_sparse[total_edges < 0.2] <- 0
##minimal
am <- plot.minimal.n(total_edges_sparse, 1, names(obs_full), 2)
n_obs_am <- dim(am[[3]])[1]
g <- from_adj_matrix(am[[3]], mode = "directed", weighted = TRUE)
g$nodes_df$label <- names(obs_full)[am[[4]]]
g$edges_df$"label" <- g$edges_df$weight
g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", n_obs_am - 1))
g$nodes_df$fontcolor <- c("white", rep("black", n_obs_am - 1))
print(render_graph(g))
# g <- from_adj_matrix(total_edges_sparse, mode = "directed", weighted = TRUE)
# g <- from_adj_matrix(total_edges, mode = "directed", weighted = TRUE)
# g$nodes_df$label <- names(obs_full)
# g$edges_df$"label" <- g$edges_df$weight
# g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", N_obs - 1))
# g$nodes_df$fontcolor <- c("white", rep("black", N_obs - 1))
# print(render_graph(g))
total_edges <- round(Reduce("+", adj_mat_list) / N_iter, 1)
edges_exist <- (total_edges > 0) * 1
total_edges_sparse <- total_edges
total_edges_sparse[total_edges < 0.2] <- 0
##minimal
am <- plot.minimal.n(total_edges_sparse, 1, names(obs_full), 2)
n_obs_am <- dim(am[[3]])[1]
g <- from_adj_matrix(am[[3]], mode = "directed", weighted = TRUE)
g$nodes_df$label <- names(obs_full)[am[[4]]]
g$edges_df$"label" <- g$edges_df$weight
g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", n_obs_am - 1))
g$nodes_df$fontcolor <- c("white", rep("black", n_obs_am - 1))
print(render_graph(g))
# g <- from_adj_matrix(total_edges_sparse, mode = "directed", weighted = TRUE)
# g <- from_adj_matrix(total_edges, mode = "directed", weighted = TRUE)
# g$nodes_df$label <- names(obs_full)
# g$edges_df$"label" <- g$edges_df$weight
# g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", N_obs - 1))
# g$nodes_df$fontcolor <- c("white", rep("black", N_obs - 1))
# print(render_graph(g))
total_edges <- round(Reduce("+", adj_mat_list) / N_iter, 1)
edges_exist <- (total_edges > 0) * 1
total_edges_sparse <- total_edges
total_edges_sparse[total_edges < 0.5] <- 0
##minimal
am <- plot.minimal.n(total_edges_sparse, 1, names(obs_full), 2)
n_obs_am <- dim(am[[3]])[1]
g <- from_adj_matrix(am[[3]], mode = "directed", weighted = TRUE)
g$nodes_df$label <- names(obs_full)[am[[4]]]
g$edges_df$"label" <- g$edges_df$weight
g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", n_obs_am - 1))
g$nodes_df$fontcolor <- c("white", rep("black", n_obs_am - 1))
print(render_graph(g))
# g <- from_adj_matrix(total_edges_sparse, mode = "directed", weighted = TRUE)
# g <- from_adj_matrix(total_edges, mode = "directed", weighted = TRUE)
# g$nodes_df$label <- names(obs_full)
# g$edges_df$"label" <- g$edges_df$weight
# g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", N_obs - 1))
# g$nodes_df$fontcolor <- c("white", rep("black", N_obs - 1))
# print(render_graph(g))
g <- from_adj_matrix(total_edges_sparse, mode = "directed", weighted = TRUE)
#g <- from_adj_matrix(total_edges, mode = "directed", weighted = TRUE)
g$nodes_df$label <- names(obs_full)
g$edges_df$"label" <- g$edges_df$weight
g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", N_obs - 1))
g$nodes_df$fontcolor <- c("white", rep("black", N_obs - 1))
print(render_graph(g))
load("mad_graphs_tl2.RData")
adj_mat_all <- adj_mat_list
load("mad_graphs_tl.RData")
adj_mat_all <- c(adj_mat_all, adj_mat_list)
adj_mat_list <- adj_mat_all
N_iter <- length(adj_mat_list)
ptm_end <- proc.time()
print(ptm_end - ptm_start)
total_edges <- round(Reduce("+", adj_mat_list) / N_iter, 1)
edges_exist <- (total_edges > 0) * 1
total_edges_sparse <- total_edges
total_edges_sparse[total_edges < 0.5] <- 0
##minimal
am <- plot.minimal.n(total_edges_sparse, 1, names(obs_full), 2)
n_obs_am <- dim(am[[3]])[1]
g <- from_adj_matrix(am[[3]], mode = "directed", weighted = TRUE)
g$nodes_df$label <- names(obs_full)[am[[4]]]
g$edges_df$"label" <- g$edges_df$weight
g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", n_obs_am - 1))
g$nodes_df$fontcolor <- c("white", rep("black", n_obs_am - 1))
print(render_graph(g))
#
N_iter
load("mad_graphs_tl2.RData")
adj_mat_all <- adj_mat_list
load("mad_graphs_tl.RData")
adj_mat_all <- c(adj_mat_all, adj_mat_list)
adj_mat_list <- adj_mat_all
N_iter <- length(adj_mat_list)
ptm_end <- proc.time()
print(ptm_end - ptm_start)
total_edges <- round(Reduce("+", adj_mat_list) / N_iter, 2)
edges_exist <- (total_edges > 0) * 1
total_edges_sparse <- total_edges
total_edges_sparse[total_edges < 0.5] <- 0
##minimal
am <- plot.minimal.n(total_edges_sparse, 1, names(obs_full), 2)
n_obs_am <- dim(am[[3]])[1]
g <- from_adj_matrix(am[[3]], mode = "directed", weighted = TRUE)
g$nodes_df$label <- names(obs_full)[am[[4]]]
g$edges_df$"label" <- g$edges_df$weight
g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", n_obs_am - 1))
g$nodes_df$fontcolor <- c("white", rep("black", n_obs_am - 1))
print(render_graph(g))
#
# g <- from_adj_matrix(total_edges_sparse, mode = "directed", weighted = TRUE)
# #g <- from_adj_matrix(total_edges, mode = "directed", weighted = TRUE)
# g$nodes_df$label <- names(obs_full)
# g$edges_df$"label" <- g$edges_df$weight
# g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", N_obs - 1))
# g$nodes_df$fontcolor <- c("white", rep("black", N_obs - 1))
# print(render_graph(g))
#
##minimal
am <- plot.minimal.n(total_edges_sparse, 1, names(obs_full), 1)
n_obs_am <- dim(am[[3]])[1]
g <- from_adj_matrix(am[[3]], mode = "directed", weighted = TRUE)
g$nodes_df$label <- names(obs_full)[am[[4]]]
g$edges_df$"label" <- g$edges_df$weight
g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", n_obs_am - 1))
g$nodes_df$fontcolor <- c("white", rep("black", n_obs_am - 1))
print(render_graph(g))
#
# g <- from_adj_matrix(total_edges_sparse, mode = "directed", weighted = TRUE)
# #g <- from_adj_matrix(total_edges, mode = "directed", weighted = TRUE)
# g$nodes_df$label <- names(obs_full)
# g$edges_df$"label" <- g$edges_df$weight
# g$nodes_df$fillcolor <- c("firebrick", rep("aliceblue", N_obs - 1))
# g$nodes_df$fontcolor <- c("white", rep("black", N_obs - 1))
# print(render_graph(g))
#match admin unit to coverage numbers
admin_units <- readOGR("Z:/CHAI/Data_Mapping/Mapping/Botswana/BotswanaShapes/Cadastral Area/Cadastral Area/Cadastre_Area_Divisions.shp")
x <- list()
x[[2]] <- c(1:10)
x
x <- c()
x[2] <- 1
x
ptm <- proc.time()
M <- 1000
x <- c()
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
M <- 10000
ptm <- proc.time()
M <- 10000
x <- c()
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
ptm <- proc.time()
M <- 10000
x <- c()
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
ptm <- proc.time()
M <- 10000
x <- c()
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
ptm <- proc.time()
M <- 10000
x <- c()
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
ptm <- proc.time()
M <- 100000
x <- c()
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
ptm <- proc.time()
M <- 100000
x <- c()
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
ptm <- proc.time()
M <- 1000000
x <- c()
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
ptm <- proc.time()
M <- 10000000
x <- c()
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
ptm <- proc.time()
M <- 10000000
x <- c()
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
ptm <- proc.time()
M <- 10000000
x <- rep(NA, M)
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
ptm <- proc.time()
M <- 100000000
x <- c()
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
ptm <- proc.time()
M <- 100000000
x <- rep(NA, M)
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
# ptm <- proc.time()
#
# M <- 100000000
# x <- c()
# for(i in 1:M){
#   x[i] <- i
# }
#
# print(proc.time() - ptm)
#
ptm <- proc.time()
M <- 100000000
x <- rep("x", M)
for(i in 1:M){
x[i] <- i
}
# ptm <- proc.time()
#
# M <- 100000000
# x <- c()
# for(i in 1:M){
#   x[i] <- i
# }
#
# print(proc.time() - ptm)
#
ptm <- proc.time()
M <- 100000000
x <- rep(NA, M)
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
# ptm <- proc.time()
#
# M <- 100000000
# x <- c()
# for(i in 1:M){
#   x[i] <- i
# }
#
# print(proc.time() - ptm)
#
#
ptm <- proc.time()
M <- 10000
x <- rep(NA, M)
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
# ptm <- proc.time()
#
# M <- 100000000
# x <- c()
# for(i in 1:M){
#   x[i] <- i
# }
#
# print(proc.time() - ptm)
#
#
ptm <- proc.time()
M <- 10000
x <- rep("NA", M)
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
# ptm <- proc.time()
#
# M <- 100000000
# x <- c()
# for(i in 1:M){
#   x[i] <- i
# }
#
# print(proc.time() - ptm)
#
#
ptm <- proc.time()
M <- 100000
x <- rep("NA", M)
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
# ptm <- proc.time()
#
# M <- 100000000
# x <- c()
# for(i in 1:M){
#   x[i] <- i
# }
#
# print(proc.time() - ptm)
#
#
ptm <- proc.time()
M <- 1000000
x <- rep("NA", M)
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
# ptm <- proc.time()
#
# M <- 100000000
# x <- c()
# for(i in 1:M){
#   x[i] <- i
# }
#
# print(proc.time() - ptm)
#
#
ptm <- proc.time()
M <- 10000000
x <- rep("NA", M)
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
# ptm <- proc.time()
#
# M <- 100000000
# x <- c()
# for(i in 1:M){
#   x[i] <- i
# }
#
# print(proc.time() - ptm)
#
#
ptm <- proc.time()
M <- 10000000
x <- rep(NA, M)
for(i in 1:M){
x[i] <- i
}
print(proc.time() - ptm)
source('~/Madagascar/static.R')
View(clean_mad_hrdata)
View(clean_mad_hrdata)
load("Madagascar/dat_files.RData")
load("Madagascar/dat_files.RData")
#save(list=c("cases_list", "covs_vec_list", "n_HFs_use"), file = "dat_files.RData")
obs_full <- c(cases_list, covs_vec_list)
N_obs <- length(obs_full)
N_pts <- length(obs_full[[1]])
locs <- cbind(rep(1, N_pts), rep(2, N_pts))
obs_times <- rep(1:12, n_HFs_use)
dim(locs)
1 == 1 == 1
1 == 1
2 = 2
2 == 2
adj_mat_list <- list()
obs_lags <- c(rep(0:2, 9))
G_0 <- matrix(1, N_obs-1, N_obs-1) - diag(N_obs-1)
G_0[1, ] <- 0
for(i in 1:(N_obs-1)){
G_0[i, obs_lags[i] < obs_lags] <- 0
}
ptm_start <- proc.time()
N_iter <- 6
alpha <- runif(1, 0.6, 0.9)
ptm <- proc.time()
pc <- runpc(covs_vec_list, locs, obs_times, alpha, G_0, nSample = 500)
print(proc.time() - ptm)
load("Madagascar/dat_files.RData")
#save(list=c("cases_list", "covs_vec_list", "n_HFs_use"), file = "dat_files.RData")
obs_full <- c(cases_list, covs_vec_list)
N_obs <- length(obs_full)
N_pts <- length(obs_full[[1]])
locs <- cbind(rep(1, N_pts), rep(2, N_pts))
obs_times <- rep(1:12, n_HFs_use)
source("ModelTest/runpc.R")
source("ModelTest/runpc_last.R")
#save.image("mad_covs.RData")
adj_mat_list <- list()
obs_lags <- c(rep(0:2, 9))
G_0 <- matrix(1, N_obs-1, N_obs-1) - diag(N_obs-1)
G_0[1, ] <- 0
for(i in 1:(N_obs-1)){
G_0[i, obs_lags[i] < obs_lags] <- 0
}
ptm_start <- proc.time()
N_iter <- 6
print(i)
alpha <- runif(1, 0.6, 0.9)
ptm <- proc.time()
pc <- runpc(covs_vec_list, locs, obs_times, alpha, G_0, nSample = 500)
print(proc.time() - ptm)
###file to implement IRS causal analysis
###Idea: run pc algorithm on environmental variables and case data
###as well as IRS data. Temporal variables will be e.g. rain in Jan
source("C:/Users/scro3122/Documents/ModelTest/getCovs.R")
###file to implement IRS causal analysis
###Idea: run pc algorithm on environmental variables and case data
###as well as IRS data. Temporal variables will be e.g. rain in Jan
source("C:/Users/scro3122/Documents/ModelTest/getCovs.R")
###file to implement IRS causal analysis
###Idea: run pc algorithm on environmental variables and case data
###as well as IRS data. Temporal variables will be e.g. rain in Jan
source("C:/Users/scro3122/Documents/ModelTest/getCovs.R")
###file to implement IRS causal analysis
###Idea: run pc algorithm on environmental variables and case data
###as well as IRS data. Temporal variables will be e.g. rain in Jan
source("C:/Users/scro3122/Documents/ModelTest/getCovs.R")
###file to implement IRS causal analysis
###Idea: run pc algorithm on environmental variables and case data
###as well as IRS data. Temporal variables will be e.g. rain in Jan
source("C:/Users/scro3122/Documents/ModelTest/getCovs.R")
###file to implement IRS causal analysis
###Idea: run pc algorithm on environmental variables and case data
###as well as IRS data. Temporal variables will be e.g. rain in Jan
source("C:/Users/scro3122/Documents/ModelTest/getCovs.R")
###file to implement IRS causal analysis
###Idea: run pc algorithm on environmental variables and case data
###as well as IRS data. Temporal variables will be e.g. rain in Jan
source("C:/Users/scro3122/Documents/ModelTest/getCovs.R")
source('~/ModelTest/mad.R')
