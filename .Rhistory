print(table(country2015))
print(sum(dplyr::select(filter(inc2015, Country == "Nigeria"), rdt.result)[[1]]))
print(sum(dplyr::select(filter(inc2015, Country == "Mali"), rdt.result)[[1]]))
print(sum(dplyr::select(filter(inc2015, Country == "Rwanda"), rdt.result)[[1]]))
print(sum(dplyr::select(filter(inc2015, Country == "Kenya"), rdt.result)[[1]]))
print(table(dplyr::select(filter(inc2015, Country == "Mali"), urb.rural)))
##do Mali in 2015
mali15 <- filter(inc2015, Country == "Mali")
locs <- cbind(mali15$LONG, mali15$LAT)
plot(locs)
source("getCovs.R")
#temporal covs
# startpathsT <- list("Z:/mastergrids/MODIS_Global/MOD11A2_LST/LST_Day/1km/Monthly/LST_Day.",
#                     "Z:/mastergrids/MODIS_Global/MOD11A2_LST/LST_Day/1km/Monthly/LST_Day.",
#                     "Z:/mastergrids/MODIS_Global/MOD11A2_LST/LST_Day/1km/Monthly/LST_Day.",
#                     "Z:/mastergrids/Other_Global_Covariates/TemperatureSuitability/TSI_Pf_Dynamic/1km/Monthly/TSI-Martens2-Pf.",
#                     "Z:/mastergrids/Other_Global_Covariates/Rainfall/CHIRPS/1k/Monthly/chirps-v2-0.",
#                     "Z:/mastergrids/Other_Global_Covariates/Rainfall/CHIRPS/1k/Monthly/chirps-v2-0.",
#                     "Z:/mastergrids/Other_Global_Covariates/Rainfall/CHIRPS/1k/Monthly/chirps-v2-0."
# )
#
# endpathsT <- list(".Mean.1km.Data.tif",
#                   ".Mean.1km.Data.tif",
#                   ".Mean.1km.Data.tif",
#                   ".Data.1km.Data.tif",
#                   ".1km.tif",
#                   ".1km.tif",
#                   ".1km.tif")
# tempcovnames <- list("LST", "LST-1", "LST-2", "TempSuit", "rainfall", "rainfall-1", "rainfall-2")
# timelags <- c(0,-1,-2,0,0,-1,-2)
#
#
# tempCovs <- getTempCovsMonth(locs[,2:1], mali15$year, mali15$month, startpathsT, endpathsT, tempcovnames, timelags)
#
#
# #static covs
# covpaths <- list("Z:/mastergrids/Other_Global_Covariates/UrbanAreas/Global_Urban_Footprint/From_12m/1km/Global_Urban_Footprint_1km_12m-Prop-Urban-Unclipped.tif",
#                  "Z:/mastergrids/Other_Global_Covariates/Population/Worldpop_GPWv4_Hybrid_201708/1km/Global_Hybrid_Pop_v2_1km_UNAdj_2017-Interp.tif",
#                  "Z:/mastergrids/Other_Global_Covariates/NightTimeLights/DMSP_F18_nighttime_lights_2010_1km_global.tif",
#                  "Z:/mastergrids/Other_Global_Covariates/Elevation/Ferranti-Elevation/1km/Synoptic/ferranti_30sec_elev_max_clip.tif",
#                  "Z:/mastergrids/Other_Global_Covariates/Accessibility/Weiss/friction_surface_2015_v1.tif")
# staticCovs <- getStaticCovs(locs[,2:1], covpaths, covnames=list("Urban", "FrankenPop", "NightLights", "Elevation", "Friction"))
#
#
# save(list = c("staticCovs", "tempCovs", "startpathsT", "endpathsT", "covpaths"), file = "MaliCovs.RData")
load("MaliCovs.RData")
# df <- data.frame(x=locs[,1], y=locs[,2], LST=tempCovs$LST, month=as.numeric(mali15$month) < 10, TempSuit=tempCovs$TempSuit,
#                  urban=staticCovs$Urban)
# p <- ggplot(df, aes(x=x,y=y,color=LST)) + geom_point()
# print(p)
# p <- ggplot(df, aes(x=x,y=y,color=TempSuit)) + geom_point()
# print(p)
# p <- ggplot(df, aes(x=x,y=y,color=month)) + geom_point()
# print(p)
# p <- ggplot(df, aes(x=x,y=y,color=urban)) + geom_point()
# print(p)
# fullpath <- "Z:/mastergrids/MODIS_Global/MOD11A2_LST/LST_Day/1km/Monthly/LST_Day.2015.09.Mean.1km.Data.tif"
# r <- crop(raster(fullpath), extent(c(-12.5, -2.5, 10, 16)))
# r2 <- crop(raster(covpaths[[1]]), extent(c(-12.5, -2.5, 10, 16)))
# plot(r)
# sum(is.na(values(r)))
#
# library(FSIC)
# pr <- gpReg(c(locs, mali15$month), mali15$rdt.result)
# temp <- gpReg(c(locs, mali15$month), tempCovs$LST)
# ts <- gpReg(c(locs, mali15$month), tempCovs$TempSuit)
#
# plot(temp, pr)
# plot(ts, pr)
#
# df <- data.frame(x=locs[,1], y=locs[,2], smoothtemp = temp + tempCovs$LST)
# p <- ggplot(df, aes(x=x,y=y, color=smoothtemp)) + geom_point()
# print(p)
obs <- c(staticCovs, tempCovs)
obs$"pr" <- inc2015$rdt.result
setwd("C:/Users/scro3122/Documents/ModelTest")
library(dplyr)
library(ggplot2)
inc <- read.csv("../indi.data.for.treatmentseeking.final.csv")
years <- dplyr::select(inc, year)[[1]]
hist(years)
print(table(years))
inc2015 <- filter(inc, year == 2015)
country2015 <- dplyr::select(inc2015, Country)
print(table(country2015))
print(sum(dplyr::select(filter(inc2015, Country == "Nigeria"), rdt.result)[[1]]))
print(sum(dplyr::select(filter(inc2015, Country == "Mali"), rdt.result)[[1]]))
print(sum(dplyr::select(filter(inc2015, Country == "Rwanda"), rdt.result)[[1]]))
print(sum(dplyr::select(filter(inc2015, Country == "Kenya"), rdt.result)[[1]]))
print(table(dplyr::select(filter(inc2015, Country == "Mali"), urb.rural)))
##do Mali in 2015
mali15 <- filter(inc2015, Country == "Nigeria")
locs <- cbind(mali15$LONG, mali15$LAT)
plot(locs)
setwd("C:/Users/scro3122/Documents/ModelTest")
library(dplyr)
library(ggplot2)
inc <- read.csv("../indi.data.for.treatmentseeking.final.csv")
years <- dplyr::select(inc, year)[[1]]
hist(years)
print(table(years))
inc2015 <- filter(inc, year == 2015)
country2015 <- dplyr::select(inc2015, Country)
print(table(country2015))
print(sum(dplyr::select(filter(inc2015, Country == "Nigeria"), rdt.result)[[1]]))
print(sum(dplyr::select(filter(inc2015, Country == "Mali"), rdt.result)[[1]]))
print(sum(dplyr::select(filter(inc2015, Country == "Rwanda"), rdt.result)[[1]]))
print(sum(dplyr::select(filter(inc2015, Country == "Kenya"), rdt.result)[[1]]))
print(table(dplyr::select(filter(inc2015, Country == "Mali"), urb.rural)))
##do Mali in 2015
mali15 <- filter(inc2015, Country == "Rwanda")
locs <- cbind(mali15$LONG, mali15$LAT)
plot(locs)
min(locs[, 1])
min(locs[, 2])
min(locs[, 1])
max(locs[, 1])
max(locs[, 2])
dim(locs)
source('~/ModelTest/inc_DAG.R')
#######aggregate
lat.min <- min(locs[,1])
lat.max <- max(locs[,1])
lon.min <- min(locs[,2])
lon.max <- max(locs[,2])
N.blocks <- 10
lat.s <- seq(lat.min, lat.max, length.out=N.blocks+1)
lon.s <- seq(lon.min, lon.max, length.out=N.blocks+1)
obsAgr <- list()
#work out which points are in which block
for(i in 1:(dim(locs)[1])){
loc <- locs[i, ]
print(loc)
}
source('~/ModelTest/inc_DAG.R')
source('~/ModelTest/inc_DAG.R')
source('~/ModelTest/inc_DAG.R')
l <- list()
l[[1]] <- c(l[[1]], 2)
l[[1]] <- 2
l
l[[1]] <- c()
l
l[[1]] <- c(l[[1]], 2)
source('~/ModelTest/inc_DAG.R')
point.block
hist(point.block)
hist(point.block, breaks = 100)
source('~/ModelTest/inc_DAG.R')
obsAgg
obsAgr
source('~/ModelTest/inc_DAG.R')
source('~/ModelTest/inc_DAG.R')
source('~/ModelTest/inc_DAG.R')
centres
source('~/ModelTest/inc_DAG.R')
source('~/ModelTest/inc_DAG.R')
source('~/ModelTest/inc_DAG.R')
source('~/ModelTest/inc_DAG.R')
centres
plot(obs$Urban, obs$FrankenPop)
plot(obsAgg$Urban, obsAgg$FrankenPop)
plot(obsAgg$Urban, obsAgg$pr)
plot(obs$Urban, obs$pr)
plot(obs$pr, obs$Urban)
length(obs$pr)
length(obs$Urban)
length(staticCovs$Urban)
length(staticCovs$)
length(staticCovs$NightLights)
length(tempCovs$LST)
dim(locs)
setwd("C:/Users/scro3122/Documents/ModelTest")
library(dplyr)
library(ggplot2)
inc <- read.csv("../indi.data.for.treatmentseeking.final.csv")
years <- dplyr::select(inc, year)[[1]]
hist(years)
print(table(years))
inc2015 <- filter(inc, year == 2015)
country2015 <- dplyr::select(inc2015, Country)
print(table(country2015))
print(sum(dplyr::select(filter(inc2015, Country == "Nigeria"), rdt.result)[[1]]))
print(sum(dplyr::select(filter(inc2015, Country == "Mali"), rdt.result)[[1]]))
print(sum(dplyr::select(filter(inc2015, Country == "Rwanda"), rdt.result)[[1]]))
print(sum(dplyr::select(filter(inc2015, Country == "Kenya"), rdt.result)[[1]]))
print(table(dplyr::select(filter(inc2015, Country == "Mali"), urb.rural)))
##do Mali in 2015
mali15 <- filter(inc2015, Country == "Mali")
locs <- cbind(mali15$LONG, mali15$LAT)
plot(locs)
source("getCovs.R")
#temporal covs
# startpathsT <- list("Z:/mastergrids/MODIS_Global/MOD11A2_LST/LST_Day/1km/Monthly/LST_Day.",
#                     "Z:/mastergrids/MODIS_Global/MOD11A2_LST/LST_Day/1km/Monthly/LST_Day.",
#                     "Z:/mastergrids/MODIS_Global/MOD11A2_LST/LST_Day/1km/Monthly/LST_Day.",
#                     "Z:/mastergrids/Other_Global_Covariates/TemperatureSuitability/TSI_Pf_Dynamic/1km/Monthly/TSI-Martens2-Pf.",
#                     "Z:/mastergrids/Other_Global_Covariates/Rainfall/CHIRPS/1k/Monthly/chirps-v2-0.",
#                     "Z:/mastergrids/Other_Global_Covariates/Rainfall/CHIRPS/1k/Monthly/chirps-v2-0.",
#                     "Z:/mastergrids/Other_Global_Covariates/Rainfall/CHIRPS/1k/Monthly/chirps-v2-0."
# )
#
# endpathsT <- list(".Mean.1km.Data.tif",
#                   ".Mean.1km.Data.tif",
#                   ".Mean.1km.Data.tif",
#                   ".Data.1km.Data.tif",
#                   ".1km.tif",
#                   ".1km.tif",
#                   ".1km.tif")
# tempcovnames <- list("LST", "LST-1", "LST-2", "TempSuit", "rainfall", "rainfall-1", "rainfall-2")
# timelags <- c(0,-1,-2,0,0,-1,-2)
#
#
# tempCovs <- getTempCovsMonth(locs[,2:1], mali15$year, mali15$month, startpathsT, endpathsT, tempcovnames, timelags)
#
#
# #static covs
# covpaths <- list("Z:/mastergrids/Other_Global_Covariates/UrbanAreas/Global_Urban_Footprint/From_12m/1km/Global_Urban_Footprint_1km_12m-Prop-Urban-Unclipped.tif",
#                  "Z:/mastergrids/Other_Global_Covariates/Population/Worldpop_GPWv4_Hybrid_201708/1km/Global_Hybrid_Pop_v2_1km_UNAdj_2017-Interp.tif",
#                  "Z:/mastergrids/Other_Global_Covariates/NightTimeLights/DMSP_F18_nighttime_lights_2010_1km_global.tif",
#                  "Z:/mastergrids/Other_Global_Covariates/Elevation/Ferranti-Elevation/1km/Synoptic/ferranti_30sec_elev_max_clip.tif",
#                  "Z:/mastergrids/Other_Global_Covariates/Accessibility/Weiss/friction_surface_2015_v1.tif")
# staticCovs <- getStaticCovs(locs[,2:1], covpaths, covnames=list("Urban", "FrankenPop", "NightLights", "Elevation", "Friction"))
#
#
# save(list = c("staticCovs", "tempCovs", "startpathsT", "endpathsT", "covpaths"), file = "MaliCovs.RData")
load("MaliCovs.RData")
# df <- data.frame(x=locs[,1], y=locs[,2], LST=tempCovs$LST, month=as.numeric(mali15$month) < 10, TempSuit=tempCovs$TempSuit,
#                  urban=staticCovs$Urban)
# p <- ggplot(df, aes(x=x,y=y,color=LST)) + geom_point()
# print(p)
# p <- ggplot(df, aes(x=x,y=y,color=TempSuit)) + geom_point()
# print(p)
# p <- ggplot(df, aes(x=x,y=y,color=month)) + geom_point()
# print(p)
# p <- ggplot(df, aes(x=x,y=y,color=urban)) + geom_point()
# print(p)
# fullpath <- "Z:/mastergrids/MODIS_Global/MOD11A2_LST/LST_Day/1km/Monthly/LST_Day.2015.09.Mean.1km.Data.tif"
# r <- crop(raster(fullpath), extent(c(-12.5, -2.5, 10, 16)))
# r2 <- crop(raster(covpaths[[1]]), extent(c(-12.5, -2.5, 10, 16)))
# plot(r)
# sum(is.na(values(r)))
#
# library(FSIC)
# pr <- gpReg(c(locs, mali15$month), mali15$rdt.result)
# temp <- gpReg(c(locs, mali15$month), tempCovs$LST)
# ts <- gpReg(c(locs, mali15$month), tempCovs$TempSuit)
#
# plot(temp, pr)
# plot(ts, pr)
#
# df <- data.frame(x=locs[,1], y=locs[,2], smoothtemp = temp + tempCovs$LST)
# p <- ggplot(df, aes(x=x,y=y, color=smoothtemp)) + geom_point()
# print(p)
obs <- c(staticCovs, tempCovs)
obs$"pr" <- mali2015$rdt.result
setwd("C:/Users/scro3122/Documents/ModelTest")
source("runpc.R")
setwd("C:/Users/scro3122/Documents/ModelTest")
ptm <- proc.time()
pc <- runpc(obs, locs, mali15$month, 0.2, nSample=500)
print(proc.time() - ptm)
mali15 <- filter(inc2015, Country == "Mali")
obs <- c(staticCovs, tempCovs)
obs$"pr" <- mali15$rdt.result
setwd("C:/Users/scro3122/Documents/ModelTest")
source("runpc.R")
setwd("C:/Users/scro3122/Documents/ModelTest")
ptm <- proc.time()
pc <- runpc(obs, locs, mali15$month, 0.2, nSample=50)
print(proc.time() - ptm)
obs <- c(staticCovs, tempCovs)
obs$"pr" <- mali15$rdt.result
setwd("C:/Users/scro3122/Documents/ModelTest")
source("runpc.R")
setwd("C:/Users/scro3122/Documents/ModelTest")
ptm <- proc.time()
pc <- runpc(obs, locs, mali15$month, 0.2, nSample=500)
print(proc.time() - ptm)
#######aggregate
lat.min <- min(locs[,1])
lat.max <- max(locs[,1])
lon.min <- min(locs[,2])
lon.max <- max(locs[,2])
N.blocks <- 10
obsAgg <- list()
point.block <- c()
#work out which points are in which block
for(i in 1:(dim(locs)[1])){
loc <- locs[i, ]
lat <- loc[1]
lon <- loc[2]
lat.n <- round(N.blocks * (lat - lat.min) / (lat.max - lat.min))
lon.n <- round(N.blocks * (lon - lon.min) / (lon.max - lon.min))
point.block[i] <- lat.n * N.blocks + lon.n + 1
}
centres <- c()
blocks <- unique(point.block)
#agregate for each block for each variable
for(i in 1:length(obs)){
var.agg <- c()
for(j in 1:length(blocks)){
block <- blocks[j]
var.agg <- c(var.agg, mean(obs[[i]][which(point.block==block)]))
}
obsAgg[[i]] <- var.agg
}
for(j in 1:length(blocks)){
block <- blocks[j]
centres <- rbind(centres, colMeans(locs[which(point.block==block), ]))
}
names(obsAgg) <- names(obs)
plot(obs$pr, obs$rainfall)
plot(obs$rainfall, obs$LST)
plot(obs$rainfall, obs$TempSuit)
plot(obs$rainfall, obs$Elevation)
plot(obsAgg$rainfall, obsAgg$Elevation)
dim(obsAgg)
length(obsAgg$Urban)
ptm <- proc.time()
pc <- runpc(obsAgg, locs, mali15$month, 0.2)
print(proc.time() - ptm)
source('~/ModelTest/inc_DAG.R')
source('~/ModelTest/inc_DAG.R')
ptm <- proc.time()
pc <- runpc(obs, locs, mali15$month, 0.05, nSample=500)
print(proc.time() - ptm)
source('~/ModelTest/inc_DAG.R')
source('~/ModelTest/inc_DAG.R')
1==TRUE
plot.minimal <- function(adjMat, targetIndex, obsNames=NULL){
nvar <- dim(adjMat)[1]
if(!is.null(obsNames)){
rownames(adjMat) <- obsNames
colnames(adjMat) <- obsNames
}
#find parents of target variable
ps <- c()
for(i in (1:nvar)[-targetIndex]){
if(adjMat[i, targetIndex] || adjMat[targetIndex, i]){
ps <- c(ps, i)
}
}
#delete edges not between parent and target or parent and parent
if(length(ps) < nvar){
for(i in (1:nvar)[-c(ps, targetIndex)]){
for(j in (1:nvar)[-c(ps, targetIndex)]){
adjmat[i, j] <- 0
adjmat[j, i] <- 0
}
}
}
library(graph)
for(i in (1:nvar)[-targetIndex]){
for(j in (1:nvar)[-targetIndex]){
adjMat[i, j] <- 0
adjMat[j, i] <- 0
}
}
am.graph <-new("graphAM", adjMat=pcmat[[2]], edgemode="directed")
plot(am.graph, attrs = list(node = list(fillcolor = "white"),
edge = list(arrowsize=0.5)), main = paste0("Minimal_", length(s), "_pts_",alpha))
}
obs[[length(obs)]]
plot.minimal(pc[[1]])
plot.minimal(pc[[1]], targetIndex = length(obs))
plot.minimal <- function(adjMat, targetIndex, obsNames=NULL){
nvar <- dim(adjMat)[1]
if(!is.null(obsNames)){
rownames(adjMat) <- obsNames
colnames(adjMat) <- obsNames
}
#find parents of target variable
ps <- c()
for(i in (1:nvar)[-targetIndex]){
if(adjMat[i, targetIndex] || adjMat[targetIndex, i]){
ps <- c(ps, i)
}
}
#delete edges not between parent and target or parent and parent
if(length(ps) < nvar){
for(i in (1:nvar)[-c(ps, targetIndex)]){
for(j in (1:nvar)[-c(ps, targetIndex)]){
adjMat[i, j] <- 0
adjMat[j, i] <- 0
}
}
}
library(graph)
for(i in (1:nvar)[-targetIndex]){
for(j in (1:nvar)[-targetIndex]){
adjMat[i, j] <- 0
adjMat[j, i] <- 0
}
}
am.graph <-new("graphAM", adjMat=pcmat[[2]], edgemode="directed")
plot(am.graph, attrs = list(node = list(fillcolor = "white"),
edge = list(arrowsize=0.5)), main = paste0("Minimal_", length(s), "_pts_",alpha))
}
plot.minimal(pc[[1]], targetIndex = length(obs))
plot.minimal <- function(adjMat, targetIndex, obsNames=NULL){
nvar <- dim(adjMat)[1]
if(!is.null(obsNames)){
rownames(adjMat) <- obsNames
colnames(adjMat) <- obsNames
}
#find parents of target variable
ps <- c()
for(i in (1:nvar)[-targetIndex]){
if(adjMat[i, targetIndex] || adjMat[targetIndex, i]){
ps <- c(ps, i)
}
}
#delete edges not between parent and target or parent and parent
if(length(ps) < nvar){
for(i in (1:nvar)[-c(ps, targetIndex)]){
for(j in (1:nvar)[-c(ps, targetIndex)]){
adjMat[i, j] <- 0
adjMat[j, i] <- 0
}
}
}
library(graph)
for(i in (1:nvar)[-targetIndex]){
for(j in (1:nvar)[-targetIndex]){
adjMat[i, j] <- 0
adjMat[j, i] <- 0
}
}
am.graph <-new("graphAM", adjMat=adjMat, edgemode="directed")
plot(am.graph, attrs = list(node = list(fillcolor = "white"),
edge = list(arrowsize=0.5)), main = paste0("Minimal_", length(s), "_pts_",alpha))
}
plot.minimal(pc[[1]], targetIndex = length(obs))
plot.minimal <- function(adjMat, targetIndex, obsNames=NULL){
nvar <- dim(adjMat)[1]
if(!is.null(obsNames)){
rownames(adjMat) <- obsNames
colnames(adjMat) <- obsNames
}
#find parents of target variable
ps <- c()
for(i in (1:nvar)[-targetIndex]){
if(adjMat[i, targetIndex] || adjMat[targetIndex, i]){
ps <- c(ps, i)
}
}
#delete edges not between parent and target or parent and parent
if(length(ps) < nvar){
for(i in (1:nvar)[-c(ps, targetIndex)]){
for(j in (1:nvar)[-c(ps, targetIndex)]){
adjMat[i, j] <- 0
adjMat[j, i] <- 0
}
}
}
library(graph)
for(i in (1:nvar)[-targetIndex]){
for(j in (1:nvar)[-targetIndex]){
adjMat[i, j] <- 0
adjMat[j, i] <- 0
}
}
am.graph <-new("graphAM", adjMat=adjMat, edgemode="directed")
plot(am.graph, attrs = list(node = list(fillcolor = "white"),
edge = list(arrowsize=0.5)), main = paste0("Minimal"))
}
plot.minimal(pc[[1]], targetIndex = length(obs))
plot.minimal(pc[[1]], targetIndex = length(obs), obsNames = names(obs))
plot.minimal <- function(adjMat, targetIndex, obsNames=NULL){
nvar <- dim(adjMat)[1]
#find parents of target variable
ps <- c()
for(i in (1:nvar)[-targetIndex]){
if(adjMat[i, targetIndex] || adjMat[targetIndex, i]){
ps <- c(ps, i)
}
}
#delete edges not between parent and target or parent and parent
if(length(ps) < nvar){
for(i in (1:nvar)[-c(ps, targetIndex)]){
for(j in (1:nvar)[-c(ps, targetIndex)]){
adjMat[i, j] <- 0
adjMat[j, i] <- 0
}
}
}
adjMat2 <- adjMat[c(ps, targetIndex), c(ps, targetIndex)]
if(!is.null(obsNames)){
rownames(adjMat2) <- obsNames[c(ps, targetIndex)]
colnames(adjMat2) <- obsNames[c(ps, targetIndex)]
}
library(graph)
for(i in (1:nvar)[-targetIndex]){
for(j in (1:nvar)[-targetIndex]){
adjMat[i, j] <- 0
adjMat[j, i] <- 0
}
}
am.graph <-new("graphAM", adjMat=adjMat, edgemode="directed")
plot(am.graph, attrs = list(node = list(fillcolor = "white"),
edge = list(arrowsize=0.5)), main = paste0("Minimal"))
}
plot.minimal(pc[[1]], targetIndex = length(obs), obsNames = names(obs))
source('~/ModelTest/runpc.R')
plot.minimal(pc[[1]], targetIndex = length(obs), obsNames = names(obs))
source('~/ModelTest/inc_DAG.R')
source('~/ModelTest/inc_DAG.R')
source('~/ModelTest/inc_DAG.R')
source('~/ModelTest/inc_DAG.R')
source('~/ModelTest/inc_DAG.R')
source('~/ModelTest/inc_DAG.R')
